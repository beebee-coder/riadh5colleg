// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enum Definitions
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  AGENT_ADMINISTRATIF
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  AM
  PM
  ANY
}

// User and Auth Models
model User {
  id                    String    @id @default(cuid())
  name                  String?
  firstName             String?
  lastName              String?
  username              String?   @unique
  email                 String    @unique
  password              String
  img                   String?
  role                  Role      @default(STUDENT)
  active                Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  twoFactorEnabled      Boolean?  @default(false)
  twoFactorCode         String?
  twoFactorCodeExpires  DateTime?

  // Relations
  adminProfile      Admin?
  teacherProfile    Teacher?
  studentProfile    Student?
  parentProfile     Parent?
  agentProfile      AgentAdministratif?
  hostedSessions    ChatroomSession[] @relation("HostedSessions")
  participatedSessions SessionParticipant[] @relation("ParticipatedSessions")
  sentMessages      ChatroomMessage[] @relation("SentMessages")
  notifications     Notification[]
  scheduleDrafts    ScheduleDraft[]

  @@map("users")
}

model Admin {
  id      String  @id @default(cuid())
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String?
  surname String?
  phone   String?
}

model Teacher {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?
  
  // Relations
  subjects        Subject[] @relation("TeacherSubjects")
  lessons         Lesson[]
  teacherConstraints TeacherConstraint[]
  teacherAssignments TeacherAssignment[]

  @@map("teachers")
}

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?
  
  // Relations
  classId           Int?
  gradeId           Int?
  parentId          String?
  class             Class?   @relation(fields: [classId], references: [id], onDelete: SetNull)
  grade             Grade?   @relation(fields: [gradeId], references: [id], onDelete: SetNull)
  parent            Parent?  @relation(fields: [parentId], references: [id], onDelete: SetNull)
  attendances       Attendance[]
  results           Result[]
  optionalSubjects  Subject[] @relation("OptionalSubjects")
  optionalGroup     OptionalSubjectGroup? @relation(fields: [optionalGroupId], references: [id])
  optionalGroupId   Int?

  @@map("students")
}

model Parent {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String
  img       String?
  
  // Relations
  students Student[]

  @@map("parents")
}

model AgentAdministratif {
  id      String  @id @default(cuid())
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String?
  surname String?
  phone   String?
  poste   String? // e.g., "Secr√©taire", "Comptable"
}

// School Structure Models
model Grade {
  id      Int      @id @default(autoincrement())
  level   Int      @unique
  classes Class[]
  students Student[]

  @@map("grades")
}

model Class {
  id            Int      @id @default(autoincrement())
  name          String
  abbreviation  String?
  capacity      Int
  
  // Relations
  gradeId       Int
  grade         Grade    @relation(fields: [gradeId], references: [id])
  students      Student[]
  lessons       Lesson[]
  events        Event[]
  announcements Announcement[]
  assignments   ClassAssignment[]

  @@map("classes")
}

model Subject {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  weeklyHours   Int?
  coefficient   Int?
  isOptional    Boolean? @default(false)
  
  // Relations
  teachers      Teacher[] @relation("TeacherSubjects")
  lessons       Lesson[]
  lessonRequirements LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
  optionalStudents Student[] @relation("OptionalSubjects")

  @@map("subjects")
}

model Classroom {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  abbreviation  String?
  capacity      Int
  building      String?
  
  // Relations
  lessons       Lesson[]
  subjectRequirements SubjectRequirement[]

  @@map("classrooms")
}


// Academic Models
model Lesson {
  id            Int      @id @default(autoincrement())
  name          String
  day           Day
  startTime     DateTime
  endTime       DateTime
  
  // Relations
  subjectId     Int
  classId       Int?
  teacherId     String
  classroomId   Int?
  optionalSubjectId Int?
  
  subject       Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class         Class?    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher       Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroom     Classroom? @relation(fields: [classroomId], references: [id], onDelete: SetNull)

  attendances   Attendance[]
  exams         Exam[]
  assignments   Assignment[]
  scheduleDraftId String?
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model Exam {
  id          Int      @id @default(autoincrement())
  title       String
  startTime   DateTime
  endTime     DateTime
  
  // Relations
  lessonId    Int
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results     Result[]

  @@map("exams")
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime
  dueDate     DateTime
  
  // Relations
  lessonId    Int
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results     Result[]

  @@map("assignments")
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  
  // Relations
  studentId    String
  examId       Int?
  assignmentId Int?
  
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam         Exam?        @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignment   Assignment?  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("results")
}

model Attendance {
  id          Int      @id @default(autoincrement())
  date        DateTime
  present     Boolean
  
  // Relations
  studentId   String
  lessonId    Int
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId, date])
  @@map("attendances")
}


// Event & Announcement Models
model Event {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  
  // Relations
  classId       Int?
  class         Class?    @relation(fields: [classId], references: [id], onDelete: SetNull)

  @@map("events")
}

model Announcement {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  date          DateTime
  
  // Relations
  classId       Int?
  class         Class?   @relation(fields: [classId], references: [id], onDelete: SetNull)

  @@map("announcements")
}


// Chatroom & Session Models
model ChatroomSession {
  id            String    @id @default(cuid())
  title         String
  description   String?
  type          String    @default("CLASS") // e.g., 'CLASS', 'MEETING'
  startTime     DateTime  @default(now())
  endTime       DateTime?
  status        String    @default("ACTIVE") // e.g., 'ACTIVE', 'ENDED'

  // Relations
  hostId        String
  classId       Int?
  host          User      @relation("HostedSessions", fields: [hostId], references: [id])
  participants  SessionParticipant[]
  messages      ChatroomMessage[]
  
  @@map("chatroom_sessions")
}

model SessionParticipant {
  id                 String    @id @default(cuid())
  joinedAt           DateTime  @default(now())
  leftAt             DateTime?
  
  // Relations
  userId             String
  chatroomSessionId  String
  user               User      @relation("ParticipatedSessions", fields: [userId], references: [id])
  chatroomSession    ChatroomSession @relation(fields: [chatroomSessionId], references: [id])

  @@map("session_participants")
}

model ChatroomMessage {
  id                 String    @id @default(cuid())
  content            String
  createdAt          DateTime  @default(now())
  
  // Relations
  authorId           String
  chatroomSessionId  String
  author             User      @relation("SentMessages", fields: [authorId], references: [id])
  chatroomSession    ChatroomSession @relation(fields: [chatroomSessionId], references: [id])

  @@map("chatroom_messages")
}


// Notification Model
model Notification {
  id          String   @id @default(cuid())
  recipientId String
  type        String
  title       String
  message     String
  actionUrl   String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relation
  recipient   User     @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

// Scheduler Models
model ScheduleDraft {
  id                    String    @id @default(cuid())
  name                  String
  description           String?
  isActive              Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  userId                String
  user                  User      @relation(fields: [userId], references: [id])
  lessons               Lesson[]
  lessonRequirements    LessonRequirement[]
  teacherConstraints    TeacherConstraint[]
  subjectRequirements   SubjectRequirement[]
  teacherAssignments    TeacherAssignment[]
  
  // JSON fields to store snapshots of wizard data
  schoolConfig          Json?
  classes               Json?
  subjects              Json?
  teachers              Json?
  rooms                 Json?
  grades                Json?

  @@map("schedule_drafts")
}


model LessonRequirement {
    id              Int             @id @default(autoincrement())
    classId         Int
    subjectId       Int
    hours           Int
    scheduleDraftId String
    draft           ScheduleDraft   @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    
    @@unique([classId, subjectId, scheduleDraftId])
    @@map("lesson_requirements")
}

model TeacherConstraint {
    id              Int           @id @default(autoincrement())
    teacherId       String
    day             Day
    startTime       String
    endTime         String
    description     String?
    scheduleDraftId String
    draft           ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    
    @@map("teacher_constraints")
}

model SubjectRequirement {
    id              Int           @id @default(autoincrement())
    subjectId       Int
    timePreference  TimePreference @default(ANY)
    scheduleDraftId String
    draft           ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    subject         Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    allowedRooms    Classroom[] // Many-to-many relationship with classrooms
    
    @@map("subject_requirements")
}


model TeacherAssignment {
    id                  Int               @id @default(autoincrement())
    teacherId           String
    subjectId           Int
    scheduleDraftId     String
    draft               ScheduleDraft     @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
    teacher             Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    subject             Subject           @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    classAssignments    ClassAssignment[]
    
    @@unique([teacherId, subjectId, scheduleDraftId])
    @@map("teacher_assignments")
}

model ClassAssignment {
    id                  Int               @id @default(autoincrement())
    classId             Int
    teacherAssignmentId Int
    teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
    class               Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
    
    @@map("class_assignments")
}

model OptionalSubjectGroup {
  id          Int      @id @default(autoincrement())
  name        String
  students    Student[]
}
